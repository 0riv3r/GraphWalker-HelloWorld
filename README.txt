Create first GraphWalker test Project
=====================================

Activities in this page
-----------------------
Generate the default GraphWalker project
Add target application code according to generated Model and test skeleton
Fill the test methods with test code to test the target application code
* The full project is attached to this page

Generate the default GraphWalker project
----------------------------------------
Under your workspace directory run: the following commands

If your environment is not java version 1.8 by default:

set java 1.8 for each opened shell/terminal
$ export JAVA_HOME=`/usr/libexec/java_home -v 1.8`


Then create the maven project:

Create a maven empty project
$ mvn archetype:generate -B \
-DarchetypeGroupId=org.graphwalker \
-DarchetypeArtifactId=graphwalker-maven-archetype \
-DgroupId=com.cyberark -DartifactId=SmallTest \
-DarchetypeVersion=LATEST


CD to the project directory:

CD to the project's directory
$ cd SmallTest/


# compile and run the graphwalker tests:

Compile the project
$ mvn compile exec:java -Dexec.mainClass="com.cyberark.Runner"

View the Model
Launch the grphwalker studio:

Launch the GraphWalker studio
$ java -jar ../lib/graphwalker-studio-4.2.0.jar


open a browser at: http://localhost:9090/studio.html

in the graphwalker-studio click the 'Open' icon,

navigate to: .../SmallTest/src/main/resources/com/cyberark

and open the model file: SmallTest.json

Add target application code according to generated Model and test skeleton
--------------------------------------------------------------------------

We have the running automated test that is generated according to the model you have viewed.

Currently the test don't test anything. GraphWalker executes the test methods according to its coverage, and the test methods at this stage just print their name to the console.

These are the steps we are going to do next:

Write the code 
Change the test methods to actually test our code
create the target file:

cd src/main/java/com/cyberark

Create the Target.java file
$ touch Target.java


open VS-Studio or another IDE or text editor and open the file Target.java

paste the following code to Target.java:

Target.java
package com.cyberark;
 
 
public class Target {
     
    public static enum Color {
        RED, GREEN
    }
    private Color myColor;
 
    public Target() {
        myColor = Color.GREEN;
    }
 
    public Color getCurColor(){
        return this.myColor;
    }
 
    public void setColorToRed(){
        this.myColor = Color.RED;
    }
 
    public void setColorToGreen(){
        this.myColor = Color.GREEN;
    }
 
    public static void main(final String[] args) {
        final Target target = new Target();
        // target.myColor = Color.RED;
      System.out.println(target.myColor);
    }
}


Fill the test methods with test code to test the target application code
------------------------------------------------------------------------

Now we have to change the test code to call and test the Target.java methods

In the edges we make actions and in the vertices we check that we are at the correct state 

SomeSmallTest.java
package com.cyberark;
 
 
import org.graphwalker.core.machine.ExecutionContext;
 
/**
 * Implements the GraphWalker model: src/main/resources/SmallTest.json
 * <p/>
 * The interface SmallTest, that SomeSmallTest implements, is generated by
 * running: mvn graphwalker:generate-sources
 * also: mvn compile
 */
public class SomeSmallTest extends ExecutionContext implements SmallTest {
 
  Target target = null;
 
  @Override
  public void e_FirstAction() {
    System.out.println("Running: e_FirstAction");
    target.setColorToRed();
  }
 
  @Override
  public void e_AnotherAction() {
    System.out.println("Running: e_AnotherAction");
    target.setColorToGreen();
  }
 
  @Override
  public void e_SomeAction() {
    System.out.println("Running: e_SomeAction");
    target.setColorToRed();
  }
 
  @Override
  public void e_SomeOtherAction() {
    System.out.println("Running: e_SomeOtherAction");
    target.setColorToGreen();
  }
 
  @Override
  public void v_VerifyInitialState() {
    System.out.println("Running: v_VerifyInitialState");
    target = new Target();
    assert(target.getCurColor() == Target.Color.GREEN);
  }
 
  @Override
  public void v_VerifyFirstAction() {
    System.out.println("Running: v_VerifyFirstAction");
    assert(target.getCurColor() == Target.Color.RED);
  }
 
  @Override
  public void v_NewVertex() {
    System.out.println("Running: v_NewVertex");
    assert(target.getCurColor() == Target.Color.GREEN);
  }
}


Run
---

$ export JAVA_HOME=`/usr/libexec/java_home -v 1.8`

to enable assertions check in maven you have to run in a new shell:

Enable assertions
$ export MAVEN_OPTS="-ea"
to execute the graphwalker test run:

Execute the graphwalker test
$ mvn clean compile exec:java -Dexec.mainClass="com.cyberark.Runner"




